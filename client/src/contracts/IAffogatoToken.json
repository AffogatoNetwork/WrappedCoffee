{
  "contractName": "IAffogatoToken",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        },
        {
          "name": "recipient",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "recipient",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "wrapCoffee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unwrapCoffee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.e560f70d\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wrapCoffee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrapCoffee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.     * This value changes when `approve` or `transferFrom` are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an `Approval` event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event.\"},\"unwrapCoffee(address,uint256)\":{\"params\":{\"_amount\":\"amount of tokens to burn\",\"_owner\":\"address of the owner of the NFT.\"}},\"wrapCoffee(address,uint256)\":{\"params\":{\"_amount\":\"amount of tokens to create\",\"_owner\":\"address of the owner of the NFT.\"}}}},\"userdoc\":{\"methods\":{\"unwrapCoffee(address,uint256)\":{\"notice\":\"When the Token holder gets the ERC20 it burns them.\"},\"wrapCoffee(address,uint256)\":{\"notice\":\"When the Token holder gets the NFT it creates the ERC20.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/oscarr/Ethereum/wrapped_coffee_coin/contracts/interfaces/IAffogatoToken.sol\":\"IAffogatoToken\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/oscarr/Ethereum/wrapped_coffee_coin/contracts/interfaces/IAffogatoToken.sol\":{\"keccak256\":\"0x36bf3eea102ca3b05a18118a4c257b32c398764abaab04e49c37f1ea3309ab53\",\"urls\":[\"bzzr://bc2d3c1d3c792496b417402ade05a038b3c0c43c2e02681bf47758d7e9b04a26\",\"dweb:/ipfs/QmfYuL8oBD91uAvpcAQqNJkUMwSWix7n8g7pgp6TeRb5UF\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzzr://aa8b45b57edafc3d67bc5d916327ea16807fae33f753ca163ae0c4061b789766\",\"dweb:/ipfs/QmP5NaEwZthQeM2ESz4WTT3osrP7jhbvu7ocbttBi2JAw6\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity ^0.5.9;\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\n\ncontract IAffogatoToken is IERC20 {\n\n    /** @notice When the Token holder gets the NFT it creates the ERC20.\n      * @param _owner address of the owner of the NFT.\n      * @param _amount amount of tokens to create\n      */\n    function wrapCoffee(address _owner, uint _amount) external;\n\n    /** @notice When the Token holder gets the ERC20 it burns them.\n      * @param _owner address of the owner of the NFT.\n      * @param _amount amount of tokens to burn\n      */\n    function unwrapCoffee(address _owner, uint _amount) external;\n}\n",
  "sourcePath": "/Users/oscarr/Ethereum/wrapped_coffee_coin/contracts/interfaces/IAffogatoToken.sol",
  "ast": {
    "absolutePath": "/Users/oscarr/Ethereum/wrapped_coffee_coin/contracts/interfaces/IAffogatoToken.sol",
    "exportedSymbols": {
      "IAffogatoToken": [
        2534
      ]
    },
    "id": 2535,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2516,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:10"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol",
        "id": 2517,
        "nodeType": "ImportDirective",
        "scope": 2535,
        "sourceUnit": 3961,
        "src": "25:64:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2518,
              "name": "IERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3960,
              "src": "118:6:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$3960",
                "typeString": "contract IERC20"
              }
            },
            "id": 2519,
            "nodeType": "InheritanceSpecifier",
            "src": "118:6:10"
          }
        ],
        "contractDependencies": [
          3960
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 2534,
        "linearizedBaseContracts": [
          2534,
          3960
        ],
        "name": "IAffogatoToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice When the Token holder gets the NFT it creates the ERC20.\n@param _owner address of the owner of the NFT.\n@param _amount amount of tokens to create",
            "id": 2526,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wrapCoffee",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2524,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2521,
                  "name": "_owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 2526,
                  "src": "339:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2520,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "339:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2523,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 2526,
                  "src": "355:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2522,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "355:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "338:30:10"
            },
            "returnParameters": {
              "id": 2525,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "377:0:10"
            },
            "scope": 2534,
            "src": "319:59:10",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice When the Token holder gets the ERC20 it burns them.\n@param _owner address of the owner of the NFT.\n@param _amount amount of tokens to burn",
            "id": 2533,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unwrapCoffee",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2531,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2528,
                  "name": "_owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 2533,
                  "src": "586:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2527,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "586:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2530,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 2533,
                  "src": "602:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2529,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "602:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "585:30:10"
            },
            "returnParameters": {
              "id": 2532,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "624:0:10"
            },
            "scope": 2534,
            "src": "564:61:10",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 2535,
        "src": "91:536:10"
      }
    ],
    "src": "0:628:10"
  },
  "legacyAST": {
    "absolutePath": "/Users/oscarr/Ethereum/wrapped_coffee_coin/contracts/interfaces/IAffogatoToken.sol",
    "exportedSymbols": {
      "IAffogatoToken": [
        2534
      ]
    },
    "id": 2535,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2516,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:10"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol",
        "id": 2517,
        "nodeType": "ImportDirective",
        "scope": 2535,
        "sourceUnit": 3961,
        "src": "25:64:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2518,
              "name": "IERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3960,
              "src": "118:6:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$3960",
                "typeString": "contract IERC20"
              }
            },
            "id": 2519,
            "nodeType": "InheritanceSpecifier",
            "src": "118:6:10"
          }
        ],
        "contractDependencies": [
          3960
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 2534,
        "linearizedBaseContracts": [
          2534,
          3960
        ],
        "name": "IAffogatoToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice When the Token holder gets the NFT it creates the ERC20.\n@param _owner address of the owner of the NFT.\n@param _amount amount of tokens to create",
            "id": 2526,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wrapCoffee",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2524,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2521,
                  "name": "_owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 2526,
                  "src": "339:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2520,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "339:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2523,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 2526,
                  "src": "355:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2522,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "355:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "338:30:10"
            },
            "returnParameters": {
              "id": 2525,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "377:0:10"
            },
            "scope": 2534,
            "src": "319:59:10",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice When the Token holder gets the ERC20 it burns them.\n@param _owner address of the owner of the NFT.\n@param _amount amount of tokens to burn",
            "id": 2533,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unwrapCoffee",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2531,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2528,
                  "name": "_owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 2533,
                  "src": "586:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2527,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "586:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2530,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 2533,
                  "src": "602:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2529,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "602:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "585:30:10"
            },
            "returnParameters": {
              "id": 2532,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "624:0:10"
            },
            "scope": 2534,
            "src": "564:61:10",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 2535,
        "src": "91:536:10"
      }
    ],
    "src": "0:628:10"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.9+commit.e560f70d.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.14",
  "updatedAt": "2019-09-04T21:25:05.821Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.     * This value changes when `approve` or `transferFrom` are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an `Approval` event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event."
      },
      "unwrapCoffee(address,uint256)": {
        "params": {
          "_amount": "amount of tokens to burn",
          "_owner": "address of the owner of the NFT."
        }
      },
      "wrapCoffee(address,uint256)": {
        "params": {
          "_amount": "amount of tokens to create",
          "_owner": "address of the owner of the NFT."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "unwrapCoffee(address,uint256)": {
        "notice": "When the Token holder gets the ERC20 it burns them."
      },
      "wrapCoffee(address,uint256)": {
        "notice": "When the Token holder gets the NFT it creates the ERC20."
      }
    }
  }
}